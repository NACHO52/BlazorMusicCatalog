@page "/albumAdd"
@page "/albumAdd/{id:int}"
@inject NavigationManager NavigationManager
@inject IAlbumService AlbumService

@if (album == null)
{
    <p><em>Loading..</em></p>
}
else
{
    <EditForm Model="@album">
        <table class="table">
            <tr>
                <td>Title</td>
                <td><InputText class="form-control col-sm-5" @bind-Value="@album.Title"></InputText></td>
            </tr>
            <tr>
                <td>Cover</td>
                <td><InputFile OnChange="LoadAlbumCover"></InputFile></td>
            </tr>
            <tr>
                <td>Description</td>
                <td><InputText class="form-control col-sm-5" @bind-Value="@album.Description"></InputText></td>
            </tr>
            <tr>
                <td>ReleasedDate</td>
                <td><InputDate class="form-control col-sm-5" @bind-Value="@album.ReleasedDate"></InputDate></td>
            </tr>
            <tr>
                <td>Author</td>
                <td><InputText class="form-control col-sm-5" @bind-Value="@album.Author"></InputText></td>
            </tr>
        </table>

        <h3>Songs <button @onclick="AddSong">+</button></h3>

        @foreach (Song song in album.Songs)
        {
            <SongBlock Song="song" OnSongChange="UpdateAddSong" OnSongRemove="RemoveSong"></SongBlock>
        }

        <table>
            <tr>
                <td colspan="2" style="text-align:center">
                    <input type="submit" class="btn btn-success" value="Save" @onclick="AlbumSave" />
                </td>
                <td style="text-align:center">
                    <input type="button" class="btn btn-secondary" value="Cancel" @onclick="Cancel" />
                </td>
                @if(Id > 0)
                {
                    <td style="text-align:center">
                        <input type="button" class="btn btn-danger" value="Delet" @onclick="Delete" />
                    </td>
                }
            </tr>
        </table>
    </EditForm>


}
@code {
    [Parameter]
    public int Id { get; set; }

    public Album album;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if(Id > 0)
            {
                album = await AlbumService.GetAlbumDetails(Id);
            }
            else
            {
                album = new Album() { ReleasedDate = DateTime.Now };
                album.Songs.Add(new Song() { Number = album.Songs.Count + 1 });
            }
        }
        catch (Exception e)
        {
            throw;
        }
    }

    public void AddSong()
    {
        album.Songs.Add(new Song() { Number = album.Songs.Count + 1 });
    }

    public async void UpdateAddSong(Song song)
    {
        Song songToUpdate = album.Songs.FirstOrDefault(s => s.Number == song.Number);
        if (songToUpdate != null)
        {
            songToUpdate.Extension = song.Extension;
            songToUpdate.Name = song.Name;
            songToUpdate.Path = song.Path;
        }
    }

    protected async Task Delete()
    {
        await AlbumService.DeleteAlbum(album);
        NavigationHome();
    }

    protected async Task LoadAlbumCover(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedFile = await e.File.RequestImageFileAsync(format, 200, 200);
        var buffer = new byte[resizedFile.Size];

        await resizedFile.OpenReadStream().ReadAsync(buffer);
        album.CoverImage = buffer;
    }

    protected async Task AlbumSave()
    {
        if(Id > 0)
        {
            await AlbumService.UpdateAlbum(album);
        }
        else
        {
            await AlbumService.InsertAlbum(album);
        }
    }

    public void Cancel()
    {
        NavigationHome();
    }

    public void NavigationHome()
    {
        NavigationManager.NavigateTo("/");
    }

    public void RemoveSong(Song song)
    {
        var songToRemove = album.Songs.FirstOrDefault(s => s.Number == song.Number);
        album.Songs.Remove(songToRemove);
    }
}
